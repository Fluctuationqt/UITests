# This workflow will build a Java project with Maven

name: Nightly Integration Tests

# On push/pull for test purposes, make it nightly here!
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
#  build-with-unit-tests-and-publish:
#    runs-on: ubuntu-latest
#    
#    steps:
#      # Checkout
#      - uses: actions/checkout@v2
#        with:
#          fetch-depth: 0
#      
#      # Build with unit tests
#      - name: Build and Unit Test
#        run: mvn clean install
#      
#      # Publish the nightly build image to DockerHub
#      - name: Publish to DockerHub
#        run: echo 'Published!'
      
  integration-tests:
    runs-on: ubuntu-latest
    
    # Wait for the build and publish job to finish first
#    needs: build-with-unit-tests-and-publish
    
    # Download latest DockerHub image of XSK and run it in a service container
    # that is available to the steps below via 127.0.0.1:8080
#    services:
#      xsk:
#        image: dirigiblelabs/xsk
#        ports:
#          - 8080:8080

    steps:
      # Checkout
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Download JDK
      - name: Download sapmachine JDK 11
        run: |
          download_url="https://github.com/SAP/SapMachine/releases/download/sapmachine-11.0.11%2B8/sapmachine-jdk-11.0.11-ea.8_linux-x64_bin.tar.gz"
          wget -O "${RUNNER_TEMP}/sapmachine-jdk-11.0.11.tar.gz" "${download_url}"

      # Setup JDK
      - name: Setup sapmachine JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'jdkfile'
          jdkFile: ${{ runner.temp }}/sapmachine-jdk-11.0.11.tar.gz
          java-version: '11.0.11'
          architecture: x64

      # Setup Google Chrome
 #     - name: Setup Google Chrome
 #       uses: browser-actions/setup-chrome@latest
 #     - name: Verify Google Chrome
 #       run: chrome --version
                
      # Wait for XSK Service Container to Startup
 #     - name: Wait XSK Startup
 #       uses: nick-invision/retry@v2
 #       with:
 #         timeout_seconds: 15
 #         max_attempts: 10
 #         warning_on_retry: false
 #         command: curl -m 5 --silent --fail --request GET http://127.0.0.1:8080/services/v4/healthcheck | jq --exit-status -n 'inputs | if has("status") then .status=="Ready" else false end' > /dev/null

      - name: Setup ffmpeg
        uses: FedericoCarboni/setup-ffmpeg@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
        id: setup-ffmpeg

      - name: Setup xvfb
        run: sudo apt-get install xvfb
        
      - name: Export Display
        run: |
          export DISPLAY=:44 |
          echo $DISPLAY
          
      - name: Run test
        run: xvfb-run --listen-tcp --server-num 44 --auth-file /tmp/xvfb.auth -s "-ac -screen 0 1920x1080x24" mvn clean install -U -Pselenium-tests & ffmpeg -f x11grab -video_size 1920x1080 -i :44 -codec:v libx264 -r 12 video.mp4
      
      # Upload screenshots to a GitHub artifact
      - name: Save screenshots
        uses: actions/upload-artifact@v2
        with:
          name: integration-test-screenshots
          path: /home/runner/work/UITests/UITests/*.jpg
          retention-days: 2
        if: always()
